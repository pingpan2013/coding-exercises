class Solution {
public:
    vector<vector<string>> partition(string s) {
        vector<vector<string> > res;
        if(s.empty())   return res;
        
        vector<string> one_partition;
        dfs(s, res, one_partition, 0);
        
        return res;
    }
    
private:
    void dfs(string &s, vector<vector<string> > &res, vector<string> &one_partition, int start){
        if(start == s.size()){
            res.push_back(one_partition);
            return;
        }
        
        for(int i = start; i < s.size(); i++){
            string possible_palin = s.substr(start, i-start+1);
            if(isvalid(possible_palin)){
                one_partition.push_back(possible_palin);
                dfs(s, res, one_partition, i+1);
                one_partition.pop_back();
            }
        }
    }
    
    bool isvalid(string &s){
        int i = 0;
        int j = s.size()-1;
        
        while(i < j){
            if(s[i] != s[j])    return false;
            
            i--;
            j--;
        }
        
        return true;
    }
};


